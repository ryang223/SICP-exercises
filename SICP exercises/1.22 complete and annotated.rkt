#lang scheme
;;1.22 (Yes this and other solutions are made with external reference this first time around as I get the jist of the scale and sytax of LISP)
;basic operations
(define (square x) 
     (* x x)) 
 (define (divides? a b) 
     (= (remainder b a) 0)) 
 (define (even? n) 
   (= (remainder n 2) 0)) 
;smallest divisor computation for primes (remember this is based a probalistic method the consecutive procedure
;affirms whether the number is prime or not)
(define (smallest-divisor n)
  (define (find-divisor n test)
    (cond ((> (square test) n) n)
      ((divides? test n) test)
      (else (find-divsior n (+ test 1)))))
   (find-divisor n 2)
;primality check
(define (prime? n)
       (= n (smallest-divisor n)))
  ;check primality of consecutive odd integers in some range
  ;time&primality test
  ;drRacket has no (runtime) varible; had to substitute it with (current-milliseconds) which is pretty much the same.
    (define (runtime)
      (current-milliseconds))
  (define (timed-prime-test n)
    (start-prime-test n (runtime)))
  (define (start-prime-test n start-time)
    (if (prime? n)
        (report-prime n (- (runtime) tart-time))
        #f))
  (define (report-prime n elapsed-time)
    (display n)
    (display "***")
    (display elapsed-time)
    (newline))
;search counter
  (define (search-for-primes n counter)
    (if (even? n)
        (s-f-p (+ n 1) counter)
        (s-f-p n counter)))
  (define (s-f-p n counter)
    (if (> counter 0)
        (if (timed-prime-test n))
        (s-f-p (+ n 2) (- counter 1))
        (s-f-p (+ n 2) counter))))